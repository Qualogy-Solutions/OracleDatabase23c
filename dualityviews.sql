/*
 * script name : dualityviews
 * description : accompanying script for the blog at
 *               https://www.werkenbijqualogy.com/blog/37/json-relational-duality-view
 */
clear screen
set serveroutput on size unlimited format wrapped
rem do some formatting
set linesize 120
set pagesize 60
column document      format a60
column constructorid format 99999
column name          format a16
column nationality   format a16
column driverid      format 99999
column driver_number format 99
column code          format a3
column driver_name   format a16
column dob           format a10
column condrvid      format 99999

-- first cleanup the demo tables if they exist
drop table if exists constructordrivers purge
/
drop table if exists constructors purge
/
drop table if exists drivers purge
/

-- create a table to hold the constructors
create table if not exists constructors
(
  constructorid number         generated by default on null as identity
, name          varchar2( 16 )
, nationality   varchar2( 16 )
)
annotations ( purpose 'hold the constructors' )
/

-- create a table to hold the drivers
create table if not exists drivers
(
  driverid      number         generated by default on null as identity
, driver_number number  (  2 )
, code          varchar2(  3 )
, driver_name   varchar2( 32 )
, dob           date
, nationality   varchar2( 16 )
)
annotations ( purpose 'hold the drivers' )
/

-- create a table to register which driver is connected to which constructor
create table if not exists constructordrivers
(
  constructordriverid number         generated by default on null as identity
, constructorid       number
, driverid            number
)
annotations ( purpose 'register which driver is connected to which constructor' )
/
-- insert the constructors, using a table values constructor
insert into constructors
  ( name, nationality )
values
  ( 'AlphaTauri'    , 'Italian'  )
, ( 'Red Bull'      , 'Austrian' )
/

-- insert the drivers, using a table values constructor
insert into drivers
  ( driver_number, code, driver_name, dob, nationality )
values
  ( 11, 'PER', 'Sergio Perez'    , to_date( '19900126', 'YYYYMMDD' ), 'Mexican'    )
, ( 33, 'VER', 'Max Verstappen'  , to_date( '19970930', 'YYYYMMDD' ), 'Dutch'      )
, ( 22, 'TSU', 'Yuki Tsunoda'    , to_date( '20000511', 'YYYYMMDD' ), 'Japanese'   )
, ( 21, 'DEV', 'Nyck de Vries'   , to_date( '19950206', 'YYYYMMDD' ), 'Dutch'      )
/
-- connect the drivers to their constructors, using a table values constructor
insert into constructordrivers
  ( constructorid, driverid )
values
  ( ( select con.constructorid from constructors con where con.name = 'Red Bull' )
  , ( select drv.driverid from drivers drv where drv.code = 'VER' )
  )
, ( ( select con.constructorid from constructors con where con.name = 'Red Bull' )
  , ( select drv.driverid from drivers drv where drv.code = 'PER' )
  )
, ( ( select con.constructorid from constructors con where con.name = 'AlphaTauri' )
  , ( select drv.driverid from drivers drv where drv.code = 'DEV' )
  )
, ( ( select con.constructorid from constructors con where con.name = 'AlphaTauri' )
  , ( select drv.driverid from drivers drv where drv.code = 'TSU' )
  )
/
commit
/
-- create a view returning a json document
create or replace view constructor_v as
select json_object
       ( key 'constructorid' value con.constructorid
       , key 'name'          value con.name
       , key 'nationality'   value con.nationality
       , key 'drivers'       value
         ( select json_arrayagg( drivers returning clob )
           from   ( select json_object
                           ( key 'condrvid' value cds.constructordriverid
                           , key 'driver'   value json_object
                                                  ( key 'driverid'      value drv.driverid
                                                  , key 'driver_number' value drv.driver_number
                                                  , key 'code'          value drv.code
                                                  , key 'driver_name'   value drv.driver_name
                                                  , key 'dob'           value drv.dob
                                                  , key 'nationality'   value drv.nationality
                                                  )
                           ) drivers
                    from   constructordrivers cds
                    join   drivers            drv
                      on   ( cds.driverid = drv.driverid )
                    where  cds.constructorid = con.constructorid
                  )
         )
       ) data
from   constructors con
/
-- select Red Bull from this normal view
select json_serialize( cv.data pretty ) document
from   constructor_v cv
where  json_exists( cv.data
                  ,'$?(@.name like $name)'
                   passing '%Bull%' as "name"
                  )
/

-- create a json relational duality view
-- fails because of the lack of referential integrity
create or replace json relational duality view constructor_dv as
select json { 'constructorid' : con.constructorid
            , 'name'          : con.name
            , 'nationality'   : con.nationality
            , 'drivers'       :
              [ select json { 'condrvid' : constructordriverid
                            , 'driver'   :
                              ( select json { 'driverid'      : drv.driverid
                                            , 'driver_number' : drv.driver_number
                                            , 'code'          : drv.code
                                            , 'driver_name'   : drv.driver_name
                                            , 'dob'           : drv.dob
                                            , 'nationality'   : drv.nationality
                                            }
                                from   drivers drv with update
                                where  cds.driverid = drv.driverid
                              )
                            }
                from   constructordrivers cds with insert update delete
                where  con.constructorid = cds.constructorid
              ]
            }
from   constructors con with insert update delete
/

alter table if exists constructors
add constraint pk_constructor
    primary key ( constructorid )
/
alter table if exists drivers
add constraint pk_driver
    primary key ( driverid )
/
alter table if exists constructordrivers
add constraint pk_constructordriver
    primary key ( constructordriverid )
/
alter table if exists constructordrivers
add constraint fk_constructordrivers_constructors
    foreign key ( constructorid ) references constructors( constructorid )
/
alter table if exists constructordrivers
add constraint fk_constructordrivers_drivers
    foreign key ( driverid ) references drivers( driverid )
/

create or replace json relational duality view constructor_dv as
select json { 'constructorid' : con.constructorid
            , 'name'          : con.name
            , 'nationality'   : con.nationality
            , 'drivers'       :
              [ select json { 'condrvid' : constructordriverid
                            , 'driver'   :
                              ( select json { 'driverid'      : drv.driverid
                                            , 'driver_number' : drv.driver_number
                                            , 'code'          : drv.code
                                            , 'driver_name'   : drv.driver_name
                                            , 'dob'           : drv.dob
                                            , 'nationality'   : drv.nationality
                                            }
                                from   drivers drv with update
                                where  cds.driverid = drv.driverid
                              )
                            }
                from   constructordrivers cds with insert update delete
                where  con.constructorid = cds.constructorid
              ]
            }
from   constructors con with insert update delete
/

-- select Red Bull from this duality view
select json_serialize( cdv.data pretty ) document
from   constructor_dv cdv
where  json_exists( cdv.data
                  ,'$?(@.name like $name)'
                   passing '%Bull%' as "name"
                  )
/
update drivers
set    driver_number = 1
where  driver_number = 33
/
commit
/
-- select Red Bull from this duality view
select json_serialize( cdv.data pretty ) document
from   constructor_dv cdv
where  json_exists( cdv.data
                  ,'$?(@.name like $name)'
                   passing '%Bull%' as "name"
                  )
/
-- create a simple driver view, using GraphQL
create or replace json relational duality view simpledriver_dv as
drivers @insert @update @delete
{ driverid      : driverid
, driver_number : driver_number
, code          : code
, driver_name   : driver_name
, dob           : dob
, nationality   : nationality
}
/
-- select Max Verstappen from this duality view
select json_serialize( sdv.data pretty ) document
from   simpledriver_dv sdv
where  json_exists( sdv.data
                  ,'$?(@.driver_name like $name)'
                   passing '%Verstappen%' as "name"
                  )
/
-- change the number back to 33
update simpledriver_dv sdv
set    data = '{ "driverid" : 2
               , "driver_number" : 33
               , "code" : "VER"
               , "driver_name" : "Max Verstappen"
               , "dob" : "1997-09-30T00:00:00"
               , "nationality" : "Dutch"
               }'
where  json_exists( sdv.data
                  ,'$?(@._metadata.etag like $etag)'
                   passing 'F1D73823C6B33E3FB8FFD7C5AAC52C1E' as "etag"
                  )
/
commit
/
-- select Max Verstappen from this duality view
select json_serialize( sdv.data pretty ) document
from   simpledriver_dv sdv
where  json_exists( sdv.data
                  ,'$?(@.driver_name like $name)'
                   passing '%Verstappen%' as "name"
                  )
/
-- now create another view using the same tables
-- this time using GraphQL to define it
create or replace json relational duality view driver_dv as
drivers @insert @update @delete
{ driverid      : driverid
, driver_number : driver_number
, code          : code
, driver_name   : driver_name
, dob           : dob
, nationality   : nationality
, constructor   : constructordrivers @insert @update @delete
  { condrvid : constructordriverid
    constructors @noinsert @noupdate @nodelete @unnest
    { constructorid : constructorid
    , name          : name
    , nationality   : nationality
    }
  }
}
/
-- add Daniel Ricciardo to the AlphaTauri team
insert into driver_dv values
  ('{ "driver_number" : 3
    , "code" : "RIC"
    , "driver_name" : "Daniel Ricciardo"
    , "dob" : "1989-07-01T00:00:00"
    , "nationality" : "Australian"
    , "constructor" : [
                        { "constructorid" : 1
                        , "name" : "AlphaTauri"
                        , "nationality" : "Italian"
                        }
                      ]
    }')
/
commit
/
-- select Daniel Ricciardo from this duality view
select json_serialize( sdv.data pretty ) document
from   simpledriver_dv sdv
where  json_exists( sdv.data
                  ,'$?(@.driver_name like $name)'
                   passing '%Ricciardo%' as "name"
                  )
/
select *
from   drivers
where  driver_name like '%Ricciardo%'
/
-- select AlphaTauri from the duality view
select json_serialize( cdv.data pretty ) document
from   constructor_dv cdv
where  json_exists( cdv.data
                  ,'$?(@.name like $name)'
                   passing '%Tauri%' as "name"
                  )
/
update constructor_dv cdv
set    data = '{ "constructorid" : 1
               , "name" : "AlphaTauri"
               , "nationality" : "Italian"
               , "drivers" :
                 [ { "driver" :
                     { "driverid" : 3
                     , "driver_number" : 22
                     , "code" : "TSU"
                     , "driver_name" : "Yuki Tsunoda"
                     , "dob" : "2000-05-11T00:00:00"
                     , "nationality" : "Japanese"
                     }
                   },
                   { "driver" :
                     { "driverid" : 5
                     , "driver_number" : 3
                     , "code" : "RIC"
                     , "driver_name" : "Daniel Ricciardo"
                     , "dob" : "1989-07-01T00:00:00"
                     , "nationality" : "Australian"
                     }
                   }
                 ]
               }'
where  json_exists( cdv.data
                  ,'$?(@._metadata.etag like $etag)'
                   passing '793AE5493F8DEF20E0F502E616C8DC72' as "etag"
                  )
/


commit
/
-- select AlphaTauri from the duality view
select json_serialize( cdv.data pretty ) document
from   constructor_dv cdv
where  json_exists( cdv.data
                  ,'$?(@.name like $name)'
                   passing '%Tauri%' as "name"
                  )
/
-- rest enable the schema
declare
  pragma autonomous_transaction;
begin
  ords.enable_schema
    ( p_enabled             => true
    , p_schema              => 'DEMO'
    , p_url_mapping_type    => 'BASE_PATH'
    , p_url_mapping_pattern => 'demo'
    , p_auto_rest_auth      => false
    );
  commit;
end;
/
-- rest enable the JSON relational duality view
declare
  pragma autonomous_transaction;
begin
  ords.enable_object
    ( p_enabled        => true
    , p_schema         => 'DEMO'
    , p_object         => 'SIMPLEDRIVER_DV'
    , p_object_type    => 'VIEW'
    , p_object_alias   => 'simpledriver_dv'
    , p_auto_rest_auth => false
    );
  commit;
end;
/
-- do stuff in other clients
pause Do stuff in other clients
-- check Verstappen
select *
from   drivers drv
where  drv.driverid = 2
/




